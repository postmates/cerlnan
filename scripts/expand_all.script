%% Defines ExpandAll function which expands custom macros when used in conjunction with rebar3 dynamic configuration.
%% Presently the following macros are supported:
%%
%% * {if_defined, "SOME_ENV_VARIABLE", term()}.  If "SOME_ENV_VARIABLE" is defined in the os env at build time,
%%   then term() is emitted.  Otherwise, no expansion occurs and the macro is removed.

%% Finds a keyed value in a proplist returning the associated value,
%% if defined, or Default otherwise.
KeyFind =
    fun(Key, List, Default) ->
        case lists:keyfind(Key, 1, List) of
            false ->
                {Key, Default};
            Res ->
                Res
        end
    end,

%% Expands all macros contained in the provided proplist.
ExpandMacros =
    fun(F, [], Acc) ->
        lists:reverse(Acc);
       (F, [{if_defined, Var, Value}|Rest], Acc) ->
        NewAcc =
            case os:getenv(Var, false) of
                false ->
                    Acc;
                _ ->
                    [Value|Acc]
            end,
        F(F, Rest, NewAcc);
       (F, [{if_not_defined, Var, Value}|Rest], Acc) ->
        NewAcc =
            case os:getenv(Var, false) of
                false ->
                    [Value|Acc];
                _ ->
                    Acc
            end,
        F(F, Rest, NewAcc);
       (F, [Value|Rest], Acc) ->
        F(F, Rest, [Value|Acc])
    end,


%% Base case.  Return the proplist in the order we found it.
fun(_F, [], Acc) ->
    lists:reverse(Acc);

%% Explicit support for .app.src scripts.  Currently only expands
%% in application and env fields.
   (F, [{application, App, List}], Acc) when is_list(List) ->
    {_, Apps} = lists:keyfind(applications, 1, List),
    ExpandedApplications = ExpandMacros(ExpandMacros, Apps, []),

    {_, Env} = KeyFind(env, List, []),
    ExpandedEnv = ExpandMacros(ExpandMacros, Env, []),

    NewList0 = lists:keyreplace(applications, 1, List, {applications, ExpandedApplications}),
    NewList1 = lists:keyreplace(env, 1, NewList0, {env, ExpandedEnv}),
    [{application, App, NewList1}];

%% Expand entry in rebar.config value.
   (F, [{Key, List}|Rest], Acc) when is_list(List) ->
    Expanded = ExpandMacros(ExpandMacros, List, []),
    F(F, Rest, [{Key, Expanded}|Acc]);

   (F, [{Key, Value}|Rest], Acc) ->
    F(F, Rest, [{Key, Value}|Acc])
end.
